## WebSocket

* 是一种新的应用层协议，提供Web浏览器与服务器的全双工通信，类似于Socket
* 在WebSocket连接建立时，需要通过HTTP协议进行握手：发送HTTP GET请求，在HEADER中包含 `connection:upgrade;upgrade:websocket`等字段，如果服务端支持webSocket，则返回101code，表示协议转换成功
* 连接建立成功之后，会基于之前的HTTP建立的TCP长连接进行通信；提供两种数据传输格式：文本格式+二进制格式
* 在WebSocket出现之前，主要通过轮询实现通讯：客户端定期轮询（定期发送请求，即使没有数据返回）；长轮询（客户端发送请求，服务端hold住该请求，当有新的数据时才会返回；长轮询要求客户端的读写超时较长）

### 请求头部

```java
Host: server.example.com
Upgrade: websocket
Connection: Upgrade
Sec-WebSocket-Key: dGhlIHNhbXBsZSBub25jZQ==
Origin: http://example.com
Sec-WebSocket-Protocol: chat, superchat
Sec-WebSocket-Version: 13
```

- `Connection`: Upgrade
- `Upgrade`: websocket 表示要升级协议这里表示要升级成websocket协议, 一般用来改变HTTP协议
- `Sec-WebSocket-Version`: 13 表示websocket的版本。如果服务端不支持该版本，需要返回一个`Sec-WebSocket-Version`header，里面包含服务端支持的版本号，大部分使用13。
- `Sec-WebSocket-Key`：这是一个随机的base64编码的字符串，与后面服务端响应首部的`Sec-WebSocket-Accept`是配套的，提供基本的防护，比如恶意的连接，或者无意的连接

```java
Upgrade: websocket
Connection: Upgrade
Sec-WebSocket-Accept: s3pPLMBiTxaQ9kYGzzhZRbK+xOo=
Sec-WebSocket-Protocol: chat
```

* Sec-WebSocket-Accept`: 是服务器将请求头中的`Sec-WebSocket-Key`字段提取出来，拼接上一个固定的串 `258EAFA5-E914-47DA-95CA-C5AB0DC85B11`，先算SHA-1摘要，再base64编码生成一个新的key([详解](https://tools.ietf.org/html/rfc6455#section-4)) `Sec-WebSocket-Protocol`: 这个是可选的字段，返回一个服务器选择的子协议

### 数据传输格式

类似`TCP / UDP`的`segment`，websocket传输的数据都是以Frame为单位传输的，一到多个Frame来表达一个message，其中发送方（`upgrader`）将消息分割成几个Frame，接收方将这些Frame组成完整的消息。

```java
 +-+-+-+-+-------+-+-------------+-------------------------------+
 |F|R|R|R| opcode|M| Payload len |    Extended payload length    |
 |I|S|S|S|  (4)  |A|     (7)     |             (16/64)           |
 |N|V|V|V|       |S|             |   (if payload len==126/127)   |
 | |1|2|3|       |K|             |                               |
 +-+-+-+-+-------+-+-------------+ - - - - - - - - - - - - - - - +
 |     Extended payload length continued, if payload len == 127  |
 + - - - - - - - - - - - - - - - +-------------------------------+
 |                               |Masking-key, if MASK set to 1  |
 +-------------------------------+-------------------------------+
 | Masking-key (continued)       |          Payload Data         |
 +-------------------------------- - - - - - - - - - - - - - - - +
 :                     Payload Data continued ...                :
 + - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +
 |                     Payload Data continued ...                |
 +---------------------------------------------------------------+
```

* `FIN`: **1 bit** 1的话表示这是这个消息的最后一个段（fragment），其中第一个段也可能会是最后一个段

* `Payload length`: **7 bits, 7+16 bits, 或 7+64 bits** 负载长度

* `Opcode`: **4 bits** 定义的是负载数据的释义，如果出现了未知的释义，WebSocket将会失败（收到 `MUST _Fail`) 其中有这些释义

  ```java
    1.  %x0 表示延续帧
    2.  %x1 表示文本帧
    3.  %x2 表示二进制帧
    4.  %x3-7 预留给其他非控制帧
    5.  %x8 表示一个链接关闭
    6.  %x9 表示Ping
    7.  %xA 表示Pong
    8.  %xB-F 预留给其他控制帧
  ```

### 通信过程

1. 先进行TCP连接
2. 客户端发送握手
3. 服务器响应握手
4. 握手完毕后,可以相互传输数据

- 传输过程中，根据`opcode`来区分操作的类型。比如`0x8`表示断开连接，`0x0` - `0x2`表示数据交互
- 每条消息可能被切分成多个`Frame`。当WebSocket的接收方收到一个Frame时，会根据`FIN`的值来判断，是否已经收到消息的最后一个数据帧。`FIN=1`表示当前数据帧为消息的最后一个数据帧，`FIN=0`，则接收方还需要继续监听接收其余的数据帧。

5. 连接结束,发送关闭控制帧并断开TCP

- `close framw` (`opcode`为`0x8`，一旦一端发送/接收了一个`Close Frame`，就开始了`Close Handshake`，并且连接状态变为`Closing`。

### 心跳

WebSocket为了保持客户端和服务端的持续实时通信，需要知道连接是否中断。 其中某些场景，客户端、服务端长时间没有数据往来，这个时候，可以采用心跳来实现。

- 发送方->接收方：`ping` （`opcode` -> `0x9`）
- 接收方->发送方：`pong` （`opcode` -> `0xA`）

### 安全性

看到握手的原理，一定觉得好像很容易仿冒，但其实websocket设计之初也考虑一定的安全性。WebSocket协议中规定在连接建立时检查Upgrade请求中的某些字段（如`Origin`，查看每次请求是否一致），对于不符合要求的请求立即断开，在通信过程中，也对Frame中的控制位做了很多限制，以便禁止异常连接。

`websocket`协议中也规定了数据加密传输的方式，允许使用`TLS/SSL`来对通信加密，默认`ws`的端口为`80`，`wss`端口为`433`，类似HTTP与HTTPS